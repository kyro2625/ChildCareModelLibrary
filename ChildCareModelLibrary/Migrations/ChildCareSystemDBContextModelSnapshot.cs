// <auto-generated />
using System;
using ChildCareModelLibrary.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ChildCareModelLibrary.Migrations
{
    [DbContext(typeof(ChildCareSystemDBContext))]
    partial class ChildCareSystemDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ChildCareModelLibrary.Models.Administrator", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("AdminID");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.Blog", b =>
                {
                    b.Property<int>("BlogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreadtedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("StaffID");

                    b.HasIndex("StatusID");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.BlogCategory", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("BlogCategories");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<int?>("ReservationID")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceID")
                        .HasColumnType("int");

                    b.HasKey("FeedbackID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ReservationID");

                    b.HasIndex("ServiceID");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.Manager", b =>
                {
                    b.Property<int>("ManagerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("ManagerID");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.MedicalExamination", b =>
                {
                    b.Property<int>("ExaminationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Prescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReservationID")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ExaminationID");

                    b.HasIndex("ReservationID");

                    b.HasIndex("ServiceID");

                    b.ToTable("MedicalExaminations");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Birthday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("PatientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PatientID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CheckInTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("OpenTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.Property<int?>("StaffAssignedID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReservationID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("PatientID");

                    b.HasIndex("ServiceID");

                    b.HasIndex("StaffAssignedID");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.Service", b =>
                {
                    b.Property<int>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpecialtyID")
                        .HasColumnType("int");

                    b.Property<int?>("StaffID")
                        .HasColumnType("int");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceID");

                    b.HasIndex("SpecialtyID");

                    b.HasIndex("StaffID");

                    b.HasIndex("StatusID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.Specialty", b =>
                {
                    b.Property<int>("SpecialtyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SpecialtyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecialtyID");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.Staff", b =>
                {
                    b.Property<int>("StaffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("SpecialtyID")
                        .HasColumnType("int");

                    b.HasKey("StaffID");

                    b.HasIndex("SpecialtyID");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.Status", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusID");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.Blog", b =>
                {
                    b.HasOne("ChildCareModelLibrary.Models.BlogCategory", "BlogCategory")
                        .WithMany("Blogs")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChildCareModelLibrary.Models.Staff", "Staff")
                        .WithMany("Blogs")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChildCareModelLibrary.Models.Status", "Status")
                        .WithMany("Blogs")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogCategory");

                    b.Navigation("Staff");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.Feedback", b =>
                {
                    b.HasOne("ChildCareModelLibrary.Models.Customer", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerID");

                    b.HasOne("ChildCareModelLibrary.Models.Reservation", "Reservation")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ReservationID");

                    b.HasOne("ChildCareModelLibrary.Models.Service", "Service")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ServiceID");

                    b.Navigation("Customer");

                    b.Navigation("Reservation");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.MedicalExamination", b =>
                {
                    b.HasOne("ChildCareModelLibrary.Models.Reservation", "Reservation")
                        .WithMany("MedicalExaminations")
                        .HasForeignKey("ReservationID");

                    b.HasOne("ChildCareModelLibrary.Models.Service", "Service")
                        .WithMany("MedicalExaminations")
                        .HasForeignKey("ServiceID");

                    b.Navigation("Reservation");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.Patient", b =>
                {
                    b.HasOne("ChildCareModelLibrary.Models.Customer", "Customer")
                        .WithMany("Patients")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.Reservation", b =>
                {
                    b.HasOne("ChildCareModelLibrary.Models.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChildCareModelLibrary.Models.Patient", "Patient")
                        .WithMany("Reservations")
                        .HasForeignKey("PatientID");

                    b.HasOne("ChildCareModelLibrary.Models.Service", "Service")
                        .WithMany("Reservations")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChildCareModelLibrary.Models.Staff", "Staff")
                        .WithMany("Reservations")
                        .HasForeignKey("StaffAssignedID");

                    b.Navigation("Customer");

                    b.Navigation("Patient");

                    b.Navigation("Service");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.Service", b =>
                {
                    b.HasOne("ChildCareModelLibrary.Models.Specialty", "Specialty")
                        .WithMany("Services")
                        .HasForeignKey("SpecialtyID");

                    b.HasOne("ChildCareModelLibrary.Models.Staff", "Staff")
                        .WithMany("Services")
                        .HasForeignKey("StaffID");

                    b.HasOne("ChildCareModelLibrary.Models.Status", "Status")
                        .WithMany("Services")
                        .HasForeignKey("StatusID");

                    b.Navigation("Specialty");

                    b.Navigation("Staff");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.Staff", b =>
                {
                    b.HasOne("ChildCareModelLibrary.Models.Specialty", "Specialty")
                        .WithMany("Staffs")
                        .HasForeignKey("SpecialtyID");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.BlogCategory", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.Customer", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Patients");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.Patient", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.Reservation", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("MedicalExaminations");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.Service", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("MedicalExaminations");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.Specialty", b =>
                {
                    b.Navigation("Services");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.Staff", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Reservations");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("ChildCareModelLibrary.Models.Status", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
